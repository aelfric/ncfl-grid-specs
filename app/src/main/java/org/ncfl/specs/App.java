/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.ncfl.specs;

import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.apache.poi.ss.usermodel.*;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.DayOfWeek;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

public class App {
    static ObjectMapper objectMapper = new ObjectMapper()
        .registerModule(new JavaTimeModule())
        .addHandler(new MyProblemHandler());

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        slurp(Paths.get("."));
    }

    public static void slurp(Path inputFile) {
        try (
            InputStream inputStream = new FileInputStream("D:\\Downloads\\NCFL 2024 " +
                "Competition Space Grid.xlsx");
            Workbook wb = WorkbookFactory.create(inputStream);
        ) {

            Sheet hiltonChicago = wb.getSheet("Hilton Chicago");
            slurp(hiltonChicago);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static List<String> slurpHeaders(Row row){
        List<String> headers = new ArrayList<>();
        for (Cell cell : row) {
            headers.add(cell.toString());
        }
        return Collections.unmodifiableList(headers);
    }
    public static void slurp(Sheet sheet) {
        List<String> headers = slurpHeaders(sheet.getRow(0));
        List<RoomUsage> data = StreamSupport.stream(sheet.spliterator(), true)
            .skip(1)
            .map(row -> {
                Map<String, String> datum = slurpRow(row, headers);
                try {
                    if (!datum.getOrDefault("Day", "").isEmpty()) {
                        return objectMapper.convertValue(datum, RoomUsage.class);
                    } else {
                        return null;
                    }
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                    return null;
                }
            })
            .filter(Objects::nonNull)
            .toList();

        filterAndPrintRooms("Saturday Room Sets", data, DayOfWeek.SATURDAY);

        filterAndPrintRooms("Sunday Room Sets", data, DayOfWeek.SUNDAY);
    }

    private static void filterAndPrintRooms(String title,
                                            List<RoomUsage> data,
                                            DayOfWeek saturday) {
        System.out.println(title);
        Map<RoomID, List<RoomUsage>> saturdayRoomMap = data
            .stream()
            .filter(u -> u.day() == saturday)
            .collect(Collectors.groupingBy(RoomUsage::key));

        printRoomUsages(saturdayRoomMap);
    }

    private static Map<String, String> slurpRow(Row row, List<String> headers) {
        Map<String, String> datum = new HashMap<>();
        for (Cell cell : row) {
            String key = headers.get(cell.getColumnIndex());
            if (!key.isEmpty()) {

                switch (cell.getCellType()) {
                    case STRING -> datum.put(key, cell.getStringCellValue());
                    case NUMERIC -> {
                        if (DateUtil.isCellDateFormatted(cell)) {
                            datum.put(key,
                                DateUtil.getLocalDateTime(cell.getNumericCellValue())
                                    .toString());
                        } else {
                            datum.put(key,
                                Double.toString(cell.getNumericCellValue()));
                        }
                    }
                    case BLANK -> datum.put(key, "");
                    case BOOLEAN ->
                        datum.put(key, Boolean.toString(cell.getBooleanCellValue()));
                    default -> System.out.println("WARNING ignoring cell" + cell);
                }
            }
        }
        return datum;
    }

    private static void printRoomUsages(Map<RoomID, List<RoomUsage>> roomMap) {
        for (Map.Entry<RoomID, List<RoomUsage>> entry : roomMap.entrySet()) {
            System.out.println("\t" + entry.getKey().name());
            for (RoomUsage roomUsage : entry.getValue()) {
                System.out.printf(
                    "\t\t[%s - %s] %s (%s)%n",
                    roomUsage.start(),
                    roomUsage.end(),
                    roomUsage.roomSet(),
                    roomUsage.activity()
                );
            }
        }
    }

    static class MyProblemHandler extends DeserializationProblemHandler{
        @Override
        public Object handleWeirdStringValue(DeserializationContext ctx,
                                             Class<?> targetType,
                                             String valueToConvert,
                                             String failureMsg) throws IOException {
            if((targetType == Boolean.class || targetType == boolean.class) && ("Yes".equalsIgnoreCase(valueToConvert))){
                    return true;
            }
            if(targetType == DayOfWeek.class && valueToConvert != null && !valueToConvert.isEmpty()){
                return DayOfWeek.valueOf(valueToConvert.toUpperCase());
            }
            return super.handleWeirdStringValue(ctx, targetType, valueToConvert, failureMsg);
        }
    }

}
